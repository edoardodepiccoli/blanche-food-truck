<%= form_with class: "flex flex-col gap-2", data: { controller: "geocoding", geocoding_mapbox_access_token_value: ENV.fetch("MAPBOX_ACCESS_TOKEN") }, model: stop do |form| %>
  <div>
    <%= form.label :name %>
    <%= form.text_field :name, class: "input input-bordered w-full" %>
  </div>
  <div>
    <%= form.label :whatsapp_group_url %>
    <%= form.text_field :whatsapp_group_url, class: "input input-bordered w-full" %>
  </div>
  <div>
    <%= form.label :address %>
    <%= form.text_field :address, class: "input input-bordered w-full", data: { geocoding_target: "address" } %>
  </div>
  <button class="btn btn-primary" type="button" data-action="geocoding#getCoordinates">Imposta indirizzo</button>
  <p class="text-sm text-center" data-geocoding-target="coordinates">Coordinate non impostate</p>
  <div>
    <%= form.label :start_datetime %>
    <%= form.datetime_field :start_datetime, class: "input input-bordered w-full" %>
  </div>
  <div>
    <%= form.label :end_datetime %>
    <%= form.datetime_field :end_datetime, class: "input input-bordered w-full" %>
  </div>
  <div>
    <%= form.hidden_field :latitude, data: { geocoding_target: "latitude" } %>
  </div>
  <div>
    <%= form.hidden_field :longitude, data: { geocoding_target: "longitude" } %>
  </div>
  <div>
    <%= form.submit "Salva", class: "btn btn-primary w-full mb-2" %>
    <%= link_to "Annulla", stops_path, class: "btn btn-outline w-full" %>
  </div>
<% end %>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const startDatetimeInput = document.querySelector('input[name="stop[start_datetime]"]');
    const endDatetimeInput = document.querySelector('input[name="stop[end_datetime]"]');

    startDatetimeInput.addEventListener('change', function() {
      if (this.value) {
        // Parse the input value directly without timezone conversion
        const [datePart, timePart] = this.value.split('T');
        const [year, month, day] = datePart.split('-').map(Number);
        const [hours, minutes] = timePart.split(':').map(Number);
        
        const startDate = new Date(year, month - 1, day, hours, minutes);
        const endDate = new Date(startDate.getTime() + (2.5 * 60 * 60 * 1000)); // Add 2.5 hours
        
        // Format the date manually to avoid timezone issues
        const endYear = endDate.getFullYear();
        const endMonth = String(endDate.getMonth() + 1).padStart(2, '0');
        const endDay = String(endDate.getDate()).padStart(2, '0');
        const endHours = String(endDate.getHours()).padStart(2, '0');
        const endMinutes = String(endDate.getMinutes()).padStart(2, '0');
        
        const endDatetimeString = `${endYear}-${endMonth}-${endDay}T${endHours}:${endMinutes}`;
        endDatetimeInput.value = endDatetimeString;
      }
    });
  });
</script>